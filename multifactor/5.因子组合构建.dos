/**
Author: Xinhai Tang
DolphinDB server version: 2.00.12.3 2024.06.12
Storage engine: OLAP
Last modification time: 2025.02.06
DevEnv: haMainDDB-cnode3
*/

/*
使用线性回归进行因子合成和处理,从而预测 forward_returns
@param
factorTB: 多因子宽表
@example1
*/
poWeights = ols(factorTB.forward_returns, factorTB[:, 4:])
signalTBOLS = select ts_code, trade_date, close, forward_returns, 
dot(matrix(factorTB[:, 4:]),poWeights[1:]).flatten() as signal_port from factorTB
// 相关性
corr(signalTBOLS.forward_returns, signalTBOLS.signal_port)
// share signalTBOLS as signalTBOLSS

/*
使用XGBOOST模型预测 forward_returns
@param
factorTB: 多因子宽表
@example1
*/
// 加载xgboost插件，具体参考：https://docs.dolphindb.cn/zh/plugins/xgboost/xgboost.html
try{loadPlugin("xgboost")}catch(ex){}
Y = exec forward_returns from factorTB
X = factorTB[:, 4:]
// 设置参数
params = {
    "objective": "reg:squarederror", // 回归任务，使用平方误差目标函数
    "max_depth": 7,                  // 树的最大深度
    "eta": 0.05,                      // 学习率
    "subsample": 0.9,                // 每棵树使用的样本比例
    "colsample_bytree": 0.8,         // 每棵树使用的特征比例
    "min_child_weight": 1,           // 叶子节点最小样本权重和
    "gamma": 0,                      // 节点分裂所需的最小损失减少值
    "lambda": 1,                     // L2 正则化项
    "alpha": 0,                      // L1 正则化项
    "eval_metric": "rmse"            // 回归任务的评估指标（均方根误差）
}

// 训练模型，预测并计算准确率：
model = xgboost::train(Y, X, params)
// 支持将模型持久化（便于之后加载已有模型）
xgboost::saveModel(model, "AStockXgboost001.mdl")
// 加载已有模型
model = xgboost::loadModel("AStockXgboost001.mdl")
// 合成因子值
signal_port = xgboost::predict(model, factorTB[:, 4:])
// 因子值标准化
signal_port = (signal_port - mean(signal_port)) / (std(signal_port))
// 合并因子值
signalTBXG = select ts_code, trade_date, close, forward_returns, 
    signal_port as signal_port from factorTB

corr(signalTBXG.forward_returns, signalTBXG.signal_port)
// share signalTBXG as signalTBXGS

