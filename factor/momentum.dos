db = database("dfs://crypto_kline_1h")



// ========== 创建分区因子表 ==========
if(existsTable("dfs://crypto_kline_1h", "hourfactor")){
    dropTable(db, "hourfactor")  // 正确语法：使用database句柄和表名
    print("🗑️ 已删除旧表：hourfactor")
}

schema = table(1:0,
    `symbol`open_time`factor_name`factor_value,  // 通用结构
    [SYMBOL, DATETIME, SYMBOL, DOUBLE]           // 类型定义
)
hourfactor = db.createPartitionedTable(schema,`hourfactor, `open_time, sortColumns=`open_time)

print("✅ 时频因子表创建成功：dfs://crypto_kline_1h/hourfactor")



// ========== 因子函数 ==========
use ta

// === 动量因子示例：过去5小时动量 ===
def factor_momentum(closeVec, window){
    logRet = log(closeVec / move(closeVec, 1))
    return moving(sum, logRet, window)
}

// def factor_volatility(...) { ... }
// def factor_liquidity(...) { ... }
// def factor_alphaX(...) { ... }


// ========== 因子计算和存储 ==========
t = loadTable("dfs://crypto_kline_1h", "kline_1h")

result = select open_time, symbol, close,
                factor_momentum(close, 5) as momentum5h,
                factor_momentum(close, 20) as momentum20h
from t context by symbol

// 转为窄表存储
resultnarrow = unpivot(result, `symbol`open_time, `momentum5h`momentum20h) 

hourfactor.append!(resultnarrow)


